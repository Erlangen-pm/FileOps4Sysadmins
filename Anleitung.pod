=encoding utf8

=head1 Standardheader für Perl-Scripte

Folgende Zeilen sollten jedes Perl-Script einleiten:

    #!/usr/bin/env perl
    use strict;
    use warnings;
    use utf8;
    use 5.010;

Die erste Zeile sollte klar sein. 

C<use strict;> führt die Behandlung ein, dass Variablen nicht einfach aus der Luft erzeugt werden, sondern immer deklariert werden müssen. Dieser Extraaufwand an Tipperei hilft, Vertippern vorzubeugen und erleichtert das Debugging enorm.

C<use warnings;> zeigt zusätzlich Warnungen an, die auf übliche Programmierfehler hinweisen können, wenn C<perl> zum Beispiel Programmcode als gültig erachtet, aber durch den Datenfluss ungültige Daten (C<undef>-Werte in Stringverkettungen oder dergleichen) im Programm vorkommen. Derartige Probleme sind ebenfalls schwer zu debuggen bei komplexeren Datenflüssen.

C<use utf8;> informiert C<perl> darüber, dass der Quelltext des Scriptes, also die Scriptdatei selber in UTF-8 codiert sind. Damit kann man innerhalb des Scriptes Sonderzeichen und Umlaute in Strings oder RegExes verwenden und diese werden intern korrekt behandelt. Aber Achtung! C<use utf8;> hat nichts mit der Ein- oder Ausgabe des Scriptes selber zu tun. Es handelt sich wirklich nur darum, festzulegen, wie die Scriptdatei selber codiert und behandelt wird. Das Encoding für Ein- und Ausgaben muss gesondert behandelt werden, je nach dem, wo die Daten herkommen oder wo die Daten hin gehen (Dateien, Netzwerk/HTTP, Datenbank). Außerdem muss selbstverständlich die Scriptdatei dann auch von Texteditor, den man verwendet, in UTF-8 geschrieben werden, sonst macht das ja auch wieder keinen Sinn.

C<use 5.010;> wird dazu verwendet, um eine Mindestversion von Perl vorzugeben, mit der das Script laufen soll. bei C<5.010> bricht das Script mit einer Fehlermeldung ab, wenn eine Version von Perl kleiner als 5.10.0 verwendet wird. 5.10.0 sollte aber mittlerweile auf jedem System zur Verfügung stehen. Ist das nicht der Fall, sollte man sich über ein Update gedanken machen, da 5.10.0 bereits über 7 Jahre alt ist und seit dem einige wichtige Änderungen in Perl hinein geflossen sind.

=head2 Erweiterung für Dateioperationen

Folgende Module sind im Perl-Core mindestens seit Version 5.10.0 enthalten und erleichtern die Arbeit mit Dateien für portable und stabile Scripte. Für Scripte, die mit Dateien arbeiten müssen, sollten unbedingt diese Module verwendet werden. Irgendwelche Hacks mit Shellaufrufen und dergleichen sollten vermieden werden, da diese sehr stark vom Betriebssystem, der Umgebung und der Verfügbarkeit von Systemtools und Shells abhängen. Außerdem sind solche Hacks gegenüber Veränderungen der Umgebung sehr anfällig und es ist sehr schwer, mit derartigen Hacks stabile und zuverlässige Scripte mit einer verlässlichen Fehlerbehandlung zu erstellen. Also wenn Dateien behandelt werden sollen, ist man immer auf der sicheren Seite, wenn man sich der folgenden Module bedient.

    use File::Spec;
    use File::Temp;
    use FindBin;
    use File::Copy;
    use File::Path;

=head1 Lokale Bibliothek einbinden

Wie binde ich einen Pfad zu Perl-Modulen unterhalb meines Projektverzeichnisses portabel ein. Im Beispiel heißt der Modulpfad C<projlib> und befindet sich direkt unterhalb des Pfades, in dem das Perlscript selber liegt.

    use FindBin qw(Bin);
    use File::Spec qw(splitpath catfile);
    use lib catfile(splitpath($Bin), 'projlib'); 

=head2 Die Scriptdatei selber liegt in einem Unterverzeichnis des Projektverzeichnisses

Als Erweiterung des vorhergehenden Beispieles hier noch der Fall, wenn das Script, welches aufgerufen wird, selber in einem Unterverzeichniss im Projektordner liegt (im Beispiel C<projbin>). Die Bibliothek liegt ebenfalls in einem Unterverzeichniss parallel zu C<projbin>.

    use FindBin qw(Bin);
    use File::Spec qw(splitpath catfile);
    use lib catfile(splitpath($Bin), '..', 'projlib'); # FIXME: Ist das so richtig, dass da einfach '..' drin steht, oder gibt es da etwas portableres? 

=cut
